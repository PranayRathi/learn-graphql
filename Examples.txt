# This GraphQL query retrieves data about games, authors, and reviews.
# - The 'games' field returns a list of games with their 'id' and 'platform'.
# - The 'authors' field returns a list of authors with their 'id', 'name', and 'verified' status.
# - The 'reviews' field returns a list of reviews with their 'content' and 'rating'.
```query Games {
  games {
    id
    platform
  }

  authors {
    id
    name
    verified
  }
  reviews {
    content
    rating
  }
}```


# This GraphQL query retrieves specific data for a game, review, and author by their IDs.
# - The 'game' field fetches the title of the game with the given 'gameId'.
# - The 'review' field fetches the content and rating of the review with the given 'reviewId'.
# - The 'author' field fetches the name of the author with the given 'authorId'.
query findOne($gameId: ID!, $reviewId: ID!, $authorId: ID!) {
  game(id: $gameId) {
    title
  }
  review(id: $reviewId) {
    content,
    rating
  }
  author(id: $authorId) {
    name
  }
}

query nested ($gameid: ID!){
  game(id: $gameid) {
    id
    platform
    review {
      id
      rating
    }
  }
}

query nested2($revId : ID!){
  review(id: $revId){
    rating
    content
    game {
      platform
      review {
        id
        content
      }
    }
    author {
      id
      name
      review {
        content
      }
    }
  }
}

mutation DeleteGame($deleteGameId: ID!){
  deleteGame(id: $deleteGameId) {
    id
    title
    platform
  }
}

mutation editGame($updateGameId: ID!, $game: EditGameInput!){
  updateGame(id: $updateGameId, game: $game) {
    id,
    platform
    title
  }
}

mutation AddGameM($game : AddGameInput){
  addGame(game : $game) {
    id
    platform
    title
  }
}